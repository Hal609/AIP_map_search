<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="632" onload="init(evt)" viewBox="0 0 1200 632" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno">
    <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
    <!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%"/>
            <stop stop-color="#eeeeb0" offset="95%"/>
        </linearGradient>
    </defs>
    <style type="text/css">
text { font-family:monospace; font-size:16px }
#title { text-anchor:middle; font-size:21px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 16;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="632" fill="url(#background)"/>
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="32.00">Peak Tracked Memory Usage (0.9 MiB)</text>
    <text id="subtitle" x="50.0000%" y="64.00">Made with the Fil profiler. <a href="https://pythonspeed.com/fil/" style="text-decoration: underline;" target="_parent">Try it on your code!</a></text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="84.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="32.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="32.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="619.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="925195">
        <g>
            <title>/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search_map_dfs.py:121 (search_step) (9,952 bytes, 1.08%)</title>
            <rect x="0.1185%" y="210" width="1.0757%" height="21" fill="rgb(255,234,234)" fg:x="1096" fg:w="9952"/>
            <text x="0.3685%" y="223.50"></text>
        </g>
        <g>
            <title>        self.open.extend( (9,952 bytes, 1.08%)</title>
            <rect x="0.1185%" y="232" width="1.0757%" height="21" fill="rgb(255,234,234)" fg:x="1096" fg:w="9952"/>
            <text x="0.3685%" y="245.50"></text>
        </g>
        <g>
            <title>/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search_map_dfs.py:122 (search_step) (593,216 bytes, 64.12%)</title>
            <rect x="1.1941%" y="210" width="64.1179%" height="21" fill="rgb(255,129,129)" fg:x="11048" fg:w="593216"/>
            <text x="1.4441%" y="223.50">/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search..</text>
        </g>
        <g>
            <title>            [Node(node_id, (593,216 bytes, 64.12%)</title>
            <rect x="1.1941%" y="232" width="64.1179%" height="21" fill="rgb(255,129,129)" fg:x="11048" fg:w="593216"/>
            <text x="1.4441%" y="245.50">            [Node(node_id,</text>
        </g>
        <g>
            <title>/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search_map_dfs.py:127 (search_step) (41,824 bytes, 4.52%)</title>
            <rect x="65.3121%" y="210" width="4.5206%" height="21" fill="rgb(255,218,218)" fg:x="604264" fg:w="41824"/>
            <text x="65.5621%" y="223.50">/Us..</text>
        </g>
        <g>
            <title>        self.closed.append(next_node) (41,824 bytes, 4.52%)</title>
            <rect x="65.3121%" y="232" width="4.5206%" height="21" fill="rgb(255,218,218)" fg:x="604264" fg:w="41824"/>
            <text x="65.5621%" y="245.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search_map_dfs.py:112 (run_search) (645,632 bytes, 69.78%)</title>
            <rect x="0.1185%" y="166" width="69.7833%" height="21" fill="rgb(255,124,124)" fg:x="1096" fg:w="645632"/>
            <text x="0.3685%" y="179.50">/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search..</text>
        </g>
        <g>
            <title>            self.search_step(search_type=search_type) (645,632 bytes, 69.78%)</title>
            <rect x="0.1185%" y="188" width="69.7833%" height="21" fill="rgb(255,124,124)" fg:x="1096" fg:w="645632"/>
            <text x="0.3685%" y="201.50">            self.search_step(search_type=search_type)</text>
        </g>
        <g>
            <title>/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search_map_dfs.py:312 (&lt;lambda&gt;) (647,508 bytes, 69.99%)</title>
            <rect x="0.0346%" y="122" width="69.9861%" height="21" fill="rgb(255,124,124)" fg:x="320" fg:w="647508"/>
            <text x="0.2846%" y="135.50">/Users/hal/Library/CloudStorage/OneDrive-MMU/Documents/AI_Principles/map_search/search..</text>
        </g>
        <g>
            <title>profile(lambda: searcher.run_search(search_type=method), &quot;/tmp/fil-result&quot;) (647,508 bytes, 69.99%)</title>
            <rect x="0.0346%" y="144" width="69.9861%" height="21" fill="rgb(255,124,124)" fg:x="320" fg:w="647508"/>
            <text x="0.2846%" y="157.50">profile(lambda: searcher.run_search(search_type=method), &quot;/tmp/fil-result&quot;)</text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1357 (_find_and_load) (2,764 bytes, 0.30%)</title>
            <rect x="70.2023%" y="210" width="0.2987%" height="21" fill="rgb(255,241,241)" fg:x="649508" fg:w="2764"/>
            <text x="70.4523%" y="223.50"></text>
        </g>
        <g>
            <title> (2,764 bytes, 0.30%)</title>
            <rect x="70.2023%" y="232" width="0.2987%" height="21" fill="rgb(255,241,241)" fg:x="649508" fg:w="2764"/>
            <text x="70.4523%" y="245.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1262 (_find_spec) (2,470 bytes, 0.27%)</title>
            <rect x="70.6312%" y="298" width="0.2670%" height="21" fill="rgb(255,242,242)" fg:x="653476" fg:w="2470"/>
            <text x="70.8812%" y="311.50"></text>
        </g>
        <g>
            <title> (2,470 bytes, 0.27%)</title>
            <rect x="70.6312%" y="320" width="0.2670%" height="21" fill="rgb(255,242,242)" fg:x="653476" fg:w="2470"/>
            <text x="70.8812%" y="333.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap_external&gt;:1528 (find_spec) (2,068 bytes, 0.22%)</title>
            <rect x="70.6746%" y="342" width="0.2235%" height="21" fill="rgb(255,242,242)" fg:x="653878" fg:w="2068"/>
            <text x="70.9246%" y="355.50"></text>
        </g>
        <g>
            <title> (2,068 bytes, 0.22%)</title>
            <rect x="70.6746%" y="364" width="0.2235%" height="21" fill="rgb(255,242,242)" fg:x="653878" fg:w="2068"/>
            <text x="70.9246%" y="377.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1360 (_find_and_load) (3,976 bytes, 0.43%)</title>
            <rect x="70.5010%" y="210" width="0.4297%" height="21" fill="rgb(255,240,240)" fg:x="652272" fg:w="3976"/>
            <text x="70.7510%" y="223.50"></text>
        </g>
        <g>
            <title> (3,976 bytes, 0.43%)</title>
            <rect x="70.5010%" y="232" width="0.4297%" height="21" fill="rgb(255,240,240)" fg:x="652272" fg:w="3976"/>
            <text x="70.7510%" y="245.50"></text>
        </g>
        <g>
            <title>&lt;frozen importlib._bootstrap&gt;:1322 (_find_and_load_unlocked) (3,390 bytes, 0.37%)</title>
            <rect x="70.5644%" y="254" width="0.3664%" height="21" fill="rgb(255,240,240)" fg:x="652858" fg:w="3390"/>
            <text x="70.8144%" y="267.50"></text>
        </g>
        <g>
            <title> (3,390 bytes, 0.37%)</title>
            <rect x="70.5644%" y="276" width="0.3664%" height="21" fill="rgb(255,240,240)" fg:x="652858" fg:w="3390"/>
            <text x="70.8144%" y="289.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/filprofiler/_tracer.py:151 (disable_thread_pools) (7,966 bytes, 0.86%)</title>
            <rect x="70.1005%" y="166" width="0.8610%" height="21" fill="rgb(255,236,236)" fg:x="648566" fg:w="7966"/>
            <text x="70.3505%" y="179.50"></text>
        </g>
        <g>
            <title>        from numexpr import set_num_threads as numexpr_set_num_threads (7,966 bytes, 0.86%)</title>
            <rect x="70.1005%" y="188" width="0.8610%" height="21" fill="rgb(255,236,236)" fg:x="648566" fg:w="7966"/>
            <text x="70.3505%" y="201.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:586 (__init__) (39,703 bytes, 4.29%)</title>
            <rect x="71.1508%" y="254" width="4.2913%" height="21" fill="rgb(255,218,218)" fg:x="658284" fg:w="39703"/>
            <text x="71.4008%" y="267.50">/Us..</text>
        </g>
        <g>
            <title>        self._original_info = self._controller.info() (39,703 bytes, 4.29%)</title>
            <rect x="71.1508%" y="276" width="4.2913%" height="21" fill="rgb(255,218,218)" fg:x="658284" fg:w="39703"/>
            <text x="71.4008%" y="289.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:829 (info) (39,425 bytes, 4.26%)</title>
            <rect x="71.1809%" y="298" width="4.2613%" height="21" fill="rgb(255,219,219)" fg:x="658562" fg:w="39425"/>
            <text x="71.4309%" y="311.50">/Us..</text>
        </g>
        <g>
            <title>        return [lib_controller.info() for lib_controller in self.lib_controllers] (39,425 bytes, 4.26%)</title>
            <rect x="71.1809%" y="320" width="4.2613%" height="21" fill="rgb(255,219,219)" fg:x="658562" fg:w="39425"/>
            <text x="71.4309%" y="333.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:125 (info) (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="342" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="355.50">/Us..</text>
        </g>
        <g>
            <title>            &quot;num_threads&quot;: self.num_threads, (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="364" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="377.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:138 (num_threads) (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="386" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="399.50">/Us..</text>
        </g>
        <g>
            <title>        return self.get_num_threads() (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="408" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="421.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:495 (get_num_threads) (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="430" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="443.50">/Us..</text>
        </g>
        <g>
            <title>        return get_func() (39,217 bytes, 4.24%)</title>
            <rect x="71.2034%" y="452" width="4.2388%" height="21" fill="rgb(255,219,219)" fg:x="658770" fg:w="39217"/>
            <text x="71.4534%" y="465.50">  ..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/ctypes/__init__.py:373 (__init__) (2,730 bytes, 0.30%)</title>
            <rect x="75.7145%" y="430" width="0.2951%" height="21" fill="rgb(255,241,241)" fg:x="700507" fg:w="2730"/>
            <text x="75.9645%" y="443.50"></text>
        </g>
        <g>
            <title>        class _FuncPtr(_CFuncPtr): (2,730 bytes, 0.30%)</title>
            <rect x="75.7145%" y="452" width="0.2951%" height="21" fill="rgb(255,241,241)" fg:x="700507" fg:w="2730"/>
            <text x="75.9645%" y="465.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1227 (_get_libc) (6,172 bytes, 0.67%)</title>
            <rect x="75.6808%" y="386" width="0.6671%" height="21" fill="rgb(255,237,237)" fg:x="700195" fg:w="6172"/>
            <text x="75.9308%" y="399.50"></text>
        </g>
        <g>
            <title>            libc = ctypes.CDLL(find_library(&quot;c&quot;), mode=_RTLD_NOLOAD) (6,172 bytes, 0.67%)</title>
            <rect x="75.6808%" y="408" width="0.6671%" height="21" fill="rgb(255,237,237)" fg:x="700195" fg:w="6172"/>
            <text x="75.9308%" y="421.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/ctypes/util.py:79 (find_library) (2,762 bytes, 0.30%)</title>
            <rect x="76.0494%" y="430" width="0.2985%" height="21" fill="rgb(255,241,241)" fg:x="703605" fg:w="2762"/>
            <text x="76.2994%" y="443.50"></text>
        </g>
        <g>
            <title>                return _dyld_find(name) (2,762 bytes, 0.30%)</title>
            <rect x="76.0494%" y="452" width="0.2985%" height="21" fill="rgb(255,241,241)" fg:x="703605" fg:w="2762"/>
            <text x="76.2994%" y="465.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1024 (_find_libraries_with_dyld) (7,094 bytes, 0.77%)</title>
            <rect x="75.6808%" y="342" width="0.7668%" height="21" fill="rgb(255,236,236)" fg:x="700195" fg:w="7094"/>
            <text x="75.9308%" y="355.50"></text>
        </g>
        <g>
            <title>        libc = self._get_libc() (7,094 bytes, 0.77%)</title>
            <rect x="75.6808%" y="364" width="0.7668%" height="21" fill="rgb(255,236,236)" fg:x="700195" fg:w="7094"/>
            <text x="75.9308%" y="377.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1037 (_find_libraries_with_dyld) (69,204 bytes, 7.48%)</title>
            <rect x="76.5565%" y="342" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="708297" fg:w="69204"/>
            <text x="76.8065%" y="355.50">/Users/..</text>
        </g>
        <g>
            <title>            filepath = filepath.decode(&quot;utf-8&quot;) (69,204 bytes, 7.48%)</title>
            <rect x="76.5565%" y="364" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="708297" fg:w="69204"/>
            <text x="76.8065%" y="377.50">      ..</text>
        </g>
        <g>
            <title>&lt;frozen posixpath&gt;:428 (realpath) (69,204 bytes, 7.48%)</title>
            <rect x="89.0572%" y="474" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="823953" fg:w="69204"/>
            <text x="89.3072%" y="487.50">&lt;frozen..</text>
        </g>
        <g>
            <title> (69,204 bytes, 7.48%)</title>
            <rect x="89.0572%" y="496" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="823953" fg:w="69204"/>
            <text x="89.3072%" y="509.50"></text>
        </g>
        <g>
            <title>&lt;frozen posixpath&gt;:417 (abspath) (69,204 bytes, 7.48%)</title>
            <rect x="89.0572%" y="518" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="823953" fg:w="69204"/>
            <text x="89.3072%" y="531.50">&lt;frozen..</text>
        </g>
        <g>
            <title> (69,204 bytes, 7.48%)</title>
            <rect x="89.0572%" y="540" width="7.4799%" height="21" fill="rgb(255,209,209)" fg:x="823953" fg:w="69204"/>
            <text x="89.3072%" y="553.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1134 (_make_controller_from_path) (116,080 bytes, 12.55%)</title>
            <rect x="84.0721%" y="386" width="12.5465%" height="21" fill="rgb(255,196,196)" fg:x="777831" fg:w="116080"/>
            <text x="84.3221%" y="399.50">/Users/hal/mi..</text>
        </g>
        <g>
            <title>        filepath = _realpath(filepath) (116,080 bytes, 12.55%)</title>
            <rect x="84.0721%" y="408" width="12.5465%" height="21" fill="rgb(255,196,196)" fg:x="777831" fg:w="116080"/>
            <text x="84.3221%" y="421.50">        file..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:548 (_realpath) (70,272 bytes, 7.60%)</title>
            <rect x="89.0233%" y="430" width="7.5954%" height="21" fill="rgb(255,208,208)" fg:x="823639" fg:w="70272"/>
            <text x="89.2733%" y="443.50">/Users/..</text>
        </g>
        <g>
            <title>    return os.path.realpath(filepath) (70,272 bytes, 7.60%)</title>
            <rect x="89.0233%" y="452" width="7.5954%" height="21" fill="rgb(255,208,208)" fg:x="823639" fg:w="70272"/>
            <text x="89.2733%" y="465.50">    re..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1175 (_make_controller_from_path) (3,212 bytes, 0.35%)</title>
            <rect x="96.6187%" y="386" width="0.3472%" height="21" fill="rgb(255,241,241)" fg:x="893911" fg:w="3212"/>
            <text x="96.8687%" y="399.50"></text>
        </g>
        <g>
            <title>            lib_controller = controller_class( (3,212 bytes, 0.35%)</title>
            <rect x="96.6187%" y="408" width="0.3472%" height="21" fill="rgb(255,241,241)" fg:x="893911" fg:w="3212"/>
            <text x="96.8687%" y="421.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:114 (__init__) (2,900 bytes, 0.31%)</title>
            <rect x="96.6524%" y="430" width="0.3134%" height="21" fill="rgb(255,241,241)" fg:x="894223" fg:w="2900"/>
            <text x="96.9024%" y="443.50"></text>
        </g>
        <g>
            <title>        self.dynlib = ctypes.CDLL(filepath, mode=_RTLD_NOLOAD) (2,900 bytes, 0.31%)</title>
            <rect x="96.6524%" y="452" width="0.3134%" height="21" fill="rgb(255,241,241)" fg:x="894223" fg:w="2900"/>
            <text x="96.9024%" y="465.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/ctypes/__init__.py:373 (__init__) (2,596 bytes, 0.28%)</title>
            <rect x="96.6852%" y="474" width="0.2806%" height="21" fill="rgb(255,242,242)" fg:x="894527" fg:w="2596"/>
            <text x="96.9352%" y="487.50"></text>
        </g>
        <g>
            <title>        class _FuncPtr(_CFuncPtr): (2,596 bytes, 0.28%)</title>
            <rect x="96.6852%" y="496" width="0.2806%" height="21" fill="rgb(255,242,242)" fg:x="894527" fg:w="2596"/>
            <text x="96.9352%" y="509.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1040 (_find_libraries_with_dyld) (120,126 bytes, 12.98%)</title>
            <rect x="84.0364%" y="342" width="12.9839%" height="21" fill="rgb(255,196,196)" fg:x="777501" fg:w="120126"/>
            <text x="84.2864%" y="355.50">/Users/hal/min..</text>
        </g>
        <g>
            <title>            self._make_controller_from_path(filepath) (120,126 bytes, 12.98%)</title>
            <rect x="84.0364%" y="364" width="12.9839%" height="21" fill="rgb(255,196,196)" fg:x="777501" fg:w="120126"/>
            <text x="84.2864%" y="377.50">            s..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:818 (__init__) (199,058 bytes, 21.52%)</title>
            <rect x="75.6300%" y="254" width="21.5152%" height="21" fill="rgb(255,180,180)" fg:x="699725" fg:w="199058"/>
            <text x="75.8800%" y="267.50">/Users/hal/miniforge3/lib..</text>
        </g>
        <g>
            <title>        self._load_libraries() (199,058 bytes, 21.52%)</title>
            <rect x="75.6300%" y="276" width="21.5152%" height="21" fill="rgb(255,180,180)" fg:x="699725" fg:w="199058"/>
            <text x="75.8800%" y="289.50">        self._load_libra..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:970 (_load_libraries) (198,588 bytes, 21.46%)</title>
            <rect x="75.6808%" y="298" width="21.4644%" height="21" fill="rgb(255,180,180)" fg:x="700195" fg:w="198588"/>
            <text x="75.9308%" y="311.50">/Users/hal/miniforge3/lib..</text>
        </g>
        <g>
            <title>            self._find_libraries_with_dyld() (198,588 bytes, 21.46%)</title>
            <rect x="75.6808%" y="320" width="21.4644%" height="21" fill="rgb(255,180,180)" fg:x="700195" fg:w="198588"/>
            <text x="75.9308%" y="333.50">            self._find_l..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_compiler.py:745 (compile) (10,118 bytes, 1.09%)</title>
            <rect x="97.3523%" y="474" width="1.0936%" height="21" fill="rgb(255,234,234)" fg:x="900699" fg:w="10118"/>
            <text x="97.6023%" y="487.50"></text>
        </g>
        <g>
            <title>        p = _parser.parse(p, flags) (10,118 bytes, 1.09%)</title>
            <rect x="97.3523%" y="496" width="1.0936%" height="21" fill="rgb(255,234,234)" fg:x="900699" fg:w="10118"/>
            <text x="97.6023%" y="509.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_parser.py:979 (parse) (8,292 bytes, 0.90%)</title>
            <rect x="97.5497%" y="518" width="0.8962%" height="21" fill="rgb(255,235,235)" fg:x="902525" fg:w="8292"/>
            <text x="97.7997%" y="531.50"></text>
        </g>
        <g>
            <title>    p = _parse_sub(source, state, flags &amp; SRE_FLAG_VERBOSE, 0) (8,292 bytes, 0.90%)</title>
            <rect x="97.5497%" y="540" width="0.8962%" height="21" fill="rgb(255,235,235)" fg:x="902525" fg:w="8292"/>
            <text x="97.7997%" y="553.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_parser.py:512 (_parse_sub) (6,870 bytes, 0.74%)</title>
            <rect x="97.7034%" y="562" width="0.7425%" height="21" fill="rgb(255,237,237)" fg:x="903947" fg:w="6870"/>
            <text x="97.9534%" y="575.50"></text>
        </g>
        <g>
            <title>def _parse(source, state, verbose, nested, first=False): (6,870 bytes, 0.74%)</title>
            <rect x="97.7034%" y="584" width="0.7425%" height="21" fill="rgb(255,237,237)" fg:x="903947" fg:w="6870"/>
            <text x="97.9534%" y="597.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_compiler.py:37 (_code) (3,668 bytes, 0.40%)</title>
            <rect x="98.4459%" y="518" width="0.3965%" height="21" fill="rgb(255,240,240)" fg:x="910817" fg:w="3668"/>
            <text x="98.6959%" y="531.50"></text>
        </g>
        <g>
            <title>def _compile(code, pattern, flags): (3,668 bytes, 0.40%)</title>
            <rect x="98.4459%" y="540" width="0.3965%" height="21" fill="rgb(255,240,240)" fg:x="910817" fg:w="3668"/>
            <text x="98.6959%" y="553.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_compiler.py:749 (compile) (6,820 bytes, 0.74%)</title>
            <rect x="98.4459%" y="474" width="0.7371%" height="21" fill="rgb(255,237,237)" fg:x="910817" fg:w="6820"/>
            <text x="98.6959%" y="487.50"></text>
        </g>
        <g>
            <title>    code = _code(p, flags) (6,820 bytes, 0.74%)</title>
            <rect x="98.4459%" y="496" width="0.7371%" height="21" fill="rgb(255,237,237)" fg:x="910817" fg:w="6820"/>
            <text x="98.6959%" y="509.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/_compiler.py:579 (_code) (2,286 bytes, 0.25%)</title>
            <rect x="98.9360%" y="518" width="0.2471%" height="21" fill="rgb(255,242,242)" fg:x="915351" fg:w="2286"/>
            <text x="99.1860%" y="531.50"></text>
        </g>
        <g>
            <title>    _compile_info(code, p, flags) (2,286 bytes, 0.25%)</title>
            <rect x="98.9360%" y="540" width="0.2471%" height="21" fill="rgb(255,242,242)" fg:x="915351" fg:w="2286"/>
            <text x="99.1860%" y="553.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/__init__.py:307 (_compile) (18,072 bytes, 1.95%)</title>
            <rect x="97.3240%" y="430" width="1.9533%" height="21" fill="rgb(255,229,229)" fg:x="900437" fg:w="18072"/>
            <text x="97.5740%" y="443.50"></text>
        </g>
        <g>
            <title>        p = _compiler.compile(pattern, flags) (18,072 bytes, 1.95%)</title>
            <rect x="97.3240%" y="452" width="1.9533%" height="21" fill="rgb(255,229,229)" fg:x="900437" fg:w="18072"/>
            <text x="97.5740%" y="465.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/re/__init__.py:186 (sub) (20,292 bytes, 2.19%)</title>
            <rect x="97.1453%" y="386" width="2.1933%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="20292"/>
            <text x="97.3953%" y="399.50"></text>
        </g>
        <g>
            <title>    return _compile(pattern, flags).sub(repl, string, count) (20,292 bytes, 2.19%)</title>
            <rect x="97.1453%" y="408" width="2.1933%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="20292"/>
            <text x="97.3953%" y="421.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:1202 (_warn_if_incompatible_openmp) (21,206 bytes, 2.29%)</title>
            <rect x="97.1453%" y="298" width="2.2921%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21206"/>
            <text x="97.3953%" y="311.50"></text>
        </g>
        <g>
            <title>        msg = textwrap.dedent( (21,206 bytes, 2.29%)</title>
            <rect x="97.1453%" y="320" width="2.2921%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21206"/>
            <text x="97.3953%" y="333.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/textwrap.py:466 (dedent) (21,206 bytes, 2.29%)</title>
            <rect x="97.1453%" y="342" width="2.2921%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21206"/>
            <text x="97.3953%" y="355.50"></text>
        </g>
        <g>
            <title>        text = re.sub(r&apos;(?m)^&apos; + margin, &apos;&apos;, text) (21,206 bytes, 2.29%)</title>
            <rect x="97.1453%" y="364" width="2.2921%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21206"/>
            <text x="97.3953%" y="377.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:819 (__init__) (21,636 bytes, 2.34%)</title>
            <rect x="97.1453%" y="254" width="2.3385%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21636"/>
            <text x="97.3953%" y="267.50"></text>
        </g>
        <g>
            <title>        self._warn_if_incompatible_openmp() (21,636 bytes, 2.34%)</title>
            <rect x="97.1453%" y="276" width="2.3385%" height="21" fill="rgb(255,227,227)" fg:x="898783" fg:w="21636"/>
            <text x="97.3953%" y="289.50"></text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/contextlib.py:137 (__enter__) (272,681 bytes, 29.47%)</title>
            <rect x="70.0475%" y="122" width="29.4728%" height="21" fill="rgb(255,168,168)" fg:x="648076" fg:w="272681"/>
            <text x="70.2975%" y="135.50">/Users/hal/miniforge3/lib/python3.1..</text>
        </g>
        <g>
            <title>            return next(self.gen) (272,681 bytes, 29.47%)</title>
            <rect x="70.0475%" y="144" width="29.4728%" height="21" fill="rgb(255,168,168)" fg:x="648076" fg:w="272681"/>
            <text x="70.2975%" y="157.50">            return next(self.gen)..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/filprofiler/_tracer.py:179 (disable_thread_pools) (263,721 bytes, 28.50%)</title>
            <rect x="71.0159%" y="166" width="28.5044%" height="21" fill="rgb(255,169,169)" fg:x="657036" fg:w="263721"/>
            <text x="71.2659%" y="179.50">/Users/hal/miniforge3/lib/python3...</text>
        </g>
        <g>
            <title>    with threadpoolctl.threadpool_limits({&quot;blas&quot;: 1, &quot;openmp&quot;: 1}): (263,721 bytes, 28.50%)</title>
            <rect x="71.0159%" y="188" width="28.5044%" height="21" fill="rgb(255,169,169)" fg:x="657036" fg:w="263721"/>
            <text x="71.2659%" y="201.50">    with threadpoolctl.threadpool..</text>
        </g>
        <g>
            <title>/Users/hal/miniforge3/lib/python3.12/site-packages/threadpoolctl.py:794 (__init__) (263,071 bytes, 28.43%)</title>
            <rect x="71.0862%" y="210" width="28.4341%" height="21" fill="rgb(255,170,170)" fg:x="657686" fg:w="263071"/>
            <text x="71.3362%" y="223.50">/Users/hal/miniforge3/lib/python3...</text>
        </g>
        <g>
            <title>        super().__init__(ThreadpoolController(), limits=limits, user_api=user_api) (263,071 bytes, 28.43%)</title>
            <rect x="71.0862%" y="232" width="28.4341%" height="21" fill="rgb(255,170,170)" fg:x="657686" fg:w="263071"/>
            <text x="71.3362%" y="245.50">        super().__init__(Threadpo..</text>
        </g>
        <g>
            <title>all (925,195 bytes, 100%)</title>
            <rect x="0.0000%" y="100" width="100.0000%" height="21" fill="rgb(255,100,100)" fg:x="0" fg:w="925195"/>
            <text x="0.2500%" y="113.50"></text>
        </g>
        <g>
            <title>[No Python stack] (3,228 bytes, 0.35%)</title>
            <rect x="99.6511%" y="122" width="0.3489%" height="21" fill="rgb(255,241,241)" fg:x="921967" fg:w="3228"/>
            <text x="99.9011%" y="135.50"></text>
        </g>
    </svg>
</svg>